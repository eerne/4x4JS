extend layout

block content

	#rendererContainer

	x-deck(transition-type="fade")
		
		x-card.opaque
			h1 Hello JSConfEU!
	
		x-card.opaque
			h1 How is it going?
	
		x-card.opaque
			h1 How did yesterday's party go?

		x-card.opaque
			h1 I hope you're not hungover
		

		x-card.opaque
			h1 What we'll see

		x-card.opaque
			h1 1. A little bit of background

		x-card.opaque
			h1 2. What I've built

		x-card.opaque
			h1 ... and then ...


		x-card.opaque
			h1 3. I'm going to blow up your minds

		x-card.opaque
			h1 or your ears

		x-card.opaque
			h1 "Brace, brace"?

		x-card.opaque
			h1 RUN!

		
		x-card.opaque
			h1 I <em>love</em> music

		x-card.opaque
			h1 Blue vinyl LP

		x-card.opaque
			h1 I couldn't stop listening to it

		x-card.opaque
			h1 Early challenge


		x-card.opaque
			h1 The 80s were <em>good times</em>

		x-card.opaque
			h1 Cheesy electropop

		x-card.opaque
			h1 8-bit videogames

		x-card.opaque
			h1 CASIO keyboards


		x-card.opaque
			h1 Mine:<br/>CASIO PT-100

		x-card.opaque
			h1 Limited configurability

		x-card.opaque
			h1 Exporting === tape recording

		x-card.opaque
			h1 It was OK-ish


		x-card.opaque
			h1 And the 90s came

		x-card.opaque
			h1 OMG MULTIMEDIA!

		x-card.opaque
			h1 Trackers!

		x-card.opaque
			h1 Sample based


		x-card.opaque
			h1 Demoscene

		x-card.opaque
			h1 VJing

		x-card.opaque
			h1 Live gigs

		x-card.opaque
			h1 Hard to coordinate with people



		x-card.opaque
			h1 Software synthesis

		x-card.opaque
			h1 C/C++

		x-card.opaque
			h1 VSTi

		x-card.opaque
			h1 Hard to distribute
		


		x-card.opaque
			h1 OMG<br />JavaScript + HTML5!

		x-card.opaque
			h1 Web Audio!

		x-card.opaque
			h1 WebGL!

		x-card.opaque
			h1 node.js!



		x-card.opaque
			h1 One-woman orchestra (with JS)

		x-card.opaque
			h1 Audio &amp; video output

		x-card.opaque
			h1 Hardware input

		x-card.opaque
			h1 All glued with node.js
		


		x-card.opaque
			h1 QuNeo hardware controller

		x-card.opaque
			h1 "for hackers"

		x-card.opaque
			h1 Pressure sensitive pads, with LEDs!

		x-card.opaque
			h1 Smallish
		


		x-card.opaque
			h1 QuNeo &harr; node.js:<br />OSCBridge

		x-card.opaque
			h1 Touch events ===<br />our server gets messages

		x-card.opaque
			h1 LED Control ===<br />we send messages

		x-card.opaque
			h1 UDP<br />with node-osc
		


		x-card.opaque
			h1 Server &rarr; browser

		x-card.opaque
			div
				h1 Socket.IO
				p 
					em Of course

		x-card.opaque
			div
				h1 Subscribe to messages
				p <code>/quneo/pads/2/drum/pressure</code>
				p <code>/quneo/pads/(\\d+)/drum/pressure</code>
				

		x-card.opaque
			div
				h1 Send messages
				p <code>/quneo/leds/pads/1/*/red</code>



		x-card.opaque
			h1 Audio gear

		x-card.opaque
			div
				h1 Modular,<br />Web Audio style
				p Inputs, outputs
				p Blocks inside blocks

		x-card.opaque
			div
				h1 Wrap Web Audio native blocks
				p Oscillators &amp; buffers autoregenerated
				p ADSR envelope

		x-card.opaque
			div
				h1 Custom nodes with ScriptProcessor
				p Audio processing with JavaScript



		x-card.opaque
			h1 Audio GUI?

		x-card.opaque
			h1 Based in Web Components<br />(via x-tag)

		x-card.opaque
			h1 <code>attachTo</code> an audio gear instance

		x-card.opaque
			div
				h1 Event based



		x-card.opaque
			div
				h1 Bajotron
				p Monophonic multivoice unisonic bass line

		x-card.opaque
			div
				h1 Colchonator
				p Building pads with Bajotrons

		x-card.opaque
			div
				h1 Porrompom
				p Simple sample based drum machine

		x-card.opaque
			div
				h1 Reverbetron
				p Impulse based reverb module
		

		
		x-card.opaque
			h1 Video gear

		x-card.opaque
			h1 WebGL via three.js

		x-card.opaque
			div
				h1 Composite rendering
				p One renderer, many scenes

		x-card.opaque
			div
				h1 Procedural scenes
				p Because I'm not a 3D artist
		



		x-card.opaque
			h1 So what's the three.js composite "trick"?

		x-card.opaque
			div
				h1 renderer configuration
				p <code>renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: true });</code>
				p <code>renderer.autoClear = false;</code>
			
		x-card.opaque
			div
				h1 when rendering...
				p <code>renderer.clear()</code> once
				p repeat <code>renderer.render(scene, camera)</code> per scene
		
		x-card.opaque
			h1 That's it.
		
	

		x-card.opaque
			h1 Playing live

		x-card.opaque
			h1 Song skeleton sequenced in Renoise

		x-card.opaque
			h1 It's a tracker

		x-card.opaque
			h1 In the future, web editor



		x-card.opaque
			div
				h1 Renoise song format
				p XML based

		x-card.opaque
			h1 Export to JSON

		x-card.opaque
			div
				h1 Tracker concepts
				p Patterns, tracks, rows
				p "Like Excel, but funnier"

		x-card.opaque
			div
				h1 Plus the order list
				p List of patterns to be played in order
	


		x-card.opaque
			h1 Build a list of events

		x-card.opaque
			div
				h1 Example
				p <code>{<br />type: NOTE_ON,<br />timestamp: 0.00032,<br />order: 1, pattern: 3, row: 4<br />instrument: 3, volume: 0.5<br />}</code>

		x-card.opaque
			h1 Extra values for synchronising visuals

		x-card.opaque
			h1 Sort by timestamp




		x-card.opaque
			h1 Schedule audio events at precise times

		x-card.opaque
			div
				h1 But audio events can't be cancelled
				p Can't schedule an entire song and change your mind later

		x-card.opaque
			div
				h1 requestAuditionFrame
				p Periodically fire bursts of events
				p Whatever fits in the audio buffer

		x-card.opaque
			div
				h1 Can be off
				p Deal with it
	

	



































		x-card
			div
				h1 I dunno
				p I'm an skeptic

	#transport.hidden
		button#rew ❚◀◀
		button#play ▶
		button#pause ❚❚
		button#fwd ▶▶❚
		#time 
		#order
	
	#gui.hidden

	script(src='/socket.io/socket.io.js', type='text/javascript')
	script(src='/js/libs/x-tag/core.js', type='text/javascript')
	script(src='/js/libs/x-tag/deck.js', type='text/javascript')
	script(src='/js/libs/zepto.js', type='text/javascript')
	script(src='/js/libs/AudioContextMonkeyPatch.js', type='text/javascript')
	script(src='/js/libs/three.min.js', type='text/javascript')
	script(src='/build/bundle.js', type='text/javascript')

